// ===============================================
// üö® √çNDICE DE C√ÅLCULOS FINANCIEROS PROTEGIDOS - CR√çTICO v1.0
// ‚ö†Ô∏è NO MODIFICAR SIN AUTORIZACI√ìN EXPL√çCITA
// ===============================================
//
// Este es el √∫nico punto de entrada autorizado para todas las
// funciones de c√°lculo financiero del sistema.
//
// CARACTER√çSTICAS DE SEGURIDAD:
// ‚úÖ Funciones blindadas con validaciones
// ‚úÖ Sistema de auditor√≠a completo
// ‚úÖ Verificaci√≥n de integridad autom√°tica
// ‚úÖ Logs detallados de todas las operaciones
// ‚úÖ Detecci√≥n de modificaciones no autorizadas
//
// IMPORTACI√ìN SEGURA:
// ‚ùå NO IMPORTAR: import { calculateNetPayment } from '@/lib/paymentCalculations'
// ‚úÖ S√ç IMPORTAR: import { calculateNetPayment } from '@/lib/financial-core'
//
// ===============================================

// ===============================================
// EXPORTACIONES PRINCIPALES - FUNCIONES CR√çTICAS
// ===============================================

// Funciones de c√°lculo principal (blindadas)
export {
  // calculateTotalIncome, // ‚ùå ELIMINADO - Ya no existe
  calculateNetPayment,
  calculateHasNegativeBalance,
  calculateLoadDeductions,
  calculateFuelTotal,
  calculateCompleteFinancialResult,
  calculateAggregatedTotals
} from './calculations';

// ===============================================
// EXPORTACIONES DE VALIDACI√ìN Y SEGURIDAD
// ===============================================

// Funciones de validaci√≥n
export {
  validatePaymentCalculation,
  validateLoadPercentageCalculation,
  validateFuelCalculation,
  roundCurrency,
  isValidCurrencyAmount,
  generateIntegrityHash,
  verifyCalculationIntegrity,
  DEFAULT_VALIDATION_CONFIG
} from './validation';

// ===============================================
// EXPORTACIONES DE AUDITOR√çA
// ===============================================

// Sistema de auditor√≠a
export {
  logFinancialOperation,
  getAuditRecords,
  getAuditStatistics,
  verifyAuditIntegrity,
  exportAuditLogs,
  cleanupOldAuditLogs
} from './audit';

// ===============================================
// EXPORTACIONES DE INTEGRIDAD Y MONITOREO
// ===============================================

// Verificaci√≥n de integridad
export {
  verifyCalculationConsistency,
  generateIntegrityReport,
  startIntegrityMonitoring,
  validateFunctionIntegrity
} from './integrity';

// ===============================================
// EXPORTACIONES DE TIPOS
// ===============================================

// Tipos e interfaces
export type {
  PaymentCalculation,
  LoadPercentageCalculation,
  LoadDeductionResult,
  FuelCalculation,
  FinancialCalculationResult,
  ValidationConfig,
  AuditRecord,
  IntegrityState
} from './types';

// Constantes
export {
  FINANCIAL_CONSTANTS,
  INTEGRITY_STATES
} from './types';

// ===============================================
// FUNCIONES DE UTILIDAD PARA MIGRACI√ìN
// ===============================================

/**
 * üö® CR√çTICO - Inicializa el sistema de c√°lculos financieros protegidos
 * Debe llamarse una vez al inicio de la aplicaci√≥n
 */
export async function initializeFinancialCore(): Promise<boolean> {
  try {
    console.log('üîí Initializing Financial Core System...');
    
    // Verificar integridad de las funciones
    const integrityModule = await import('./integrity');
    const integrityCheck = await integrityModule.verifyCalculationIntegrity();
    
    if (integrityCheck.status !== 'valid') {
      console.error('üö® CRITICAL: Financial Core initialization failed - integrity check failed!');
      return false;
    }

    // Inicializar monitoreo (solo en producci√≥n)
    if (typeof window !== 'undefined' && process.env.NODE_ENV === 'production') {
      integrityModule.startIntegrityMonitoring(60); // Monitorear cada hora
    }

    console.log('‚úÖ Financial Core System initialized successfully');
    console.log('üîí All calculation functions are protected and monitored');
    
    return true;
  } catch (error) {
    console.error('üö® CRITICAL ERROR: Financial Core initialization failed:', error);
    return false;
  }
}

/**
 * üö® CR√çTICO - Ejecuta diagn√≥stico completo del sistema financiero
 * √ötil para troubleshooting y mantenimiento
 */
export async function runFinancialDiagnostic(): Promise<any> {
  try {
    console.log('üîç Running Financial System Diagnostic...');
    
    const integrityModule = await import('./integrity');
    const auditModule = await import('./audit');
    const { FINANCIAL_CONSTANTS } = await import('./types');
    
    const report = {
      timestamp: Date.now(),
      system_version: FINANCIAL_CONSTANTS.CALCULATION_VERSION,
      integrity_report: await integrityModule.generateIntegrityReport(),
      audit_statistics: auditModule.getAuditStatistics(),
      audit_integrity: auditModule.verifyAuditIntegrity()
    };

    console.log('üìä Financial System Diagnostic Complete:', report);
    return report;
  } catch (error) {
    console.error('üö® Error running financial diagnostic:', error);
    throw error;
  }
}

/**
 * ‚ö†Ô∏è FUNCI√ìN DE COMPATIBILIDAD - Usar solo durante migraci√≥n
 * Esta funci√≥n permite usar las funciones antiguas mientras se migra el c√≥digo
 * ELIMINAR despu√©s de completar la migraci√≥n
 */
export function createCompatibilityLayer() {
  console.warn('‚ö†Ô∏è Using compatibility layer - this should be removed after migration');
  
  // Importar las funciones din√°micamente para evitar referencias directas
  return import('./calculations').then(module => ({
    calculateNetPayment: module.calculateNetPayment,
    // calculateTotalIncome: module.calculateTotalIncome, // ‚ùå ELIMINADO
    calculateHasNegativeBalance: module.calculateHasNegativeBalance
  }));
}

// ===============================================
// INFORMACI√ìN DEL SISTEMA
// ===============================================

export const FINANCIAL_CORE_INFO = Object.freeze({
  version: '2.0.0',
  last_updated: '2025-02-11',
  security_level: 'CRITICAL',
  protected_functions: [
    // 'calculateTotalIncome', // ‚ùå ELIMINADO en v2.0
    'calculateNetPayment', 
    'calculateHasNegativeBalance',
    'calculateLoadDeductions',
    'calculateFuelTotal'
  ],
  documentation: 'docs/FINANCIAL_CALCULATIONS_PROTECTION.md'
} as const);

console.log('üîí Financial Core Module Loaded', FINANCIAL_CORE_INFO);