/**
 * Standard error codes for Supabase functions
 * These replace hardcoded Spanish messages in database functions
 */

export const ERROR_CODES = {
  // Authentication errors
  USER_NOT_AUTHENTICATED: 'ERROR_USER_NOT_AUTHENTICATED',
  USER_NOT_FOUND: 'ERROR_USER_NOT_FOUND',
  
  // Permission errors
  NO_PERMISSIONS: 'ERROR_NO_PERMISSIONS',
  NO_PERMISSIONS_MANAGE_USERS: 'ERROR_NO_PERMISSIONS_MANAGE_USERS',
  NO_PERMISSIONS_MANAGE_EQUIPMENT: 'ERROR_NO_PERMISSIONS_MANAGE_EQUIPMENT',
  NO_PERMISSIONS_MANAGE_CLIENTS: 'ERROR_NO_PERMISSIONS_MANAGE_CLIENTS',
  NO_PERMISSIONS_MANAGE_CLIENT_CONTACTS: 'ERROR_NO_PERMISSIONS_MANAGE_CLIENT_CONTACTS',
  NO_PERMISSIONS_MANAGE_DOCUMENTS: 'ERROR_NO_PERMISSIONS_MANAGE_DOCUMENTS',
  NO_PERMISSIONS_MANAGE_COMPANY: 'ERROR_NO_PERMISSIONS_MANAGE_COMPANY',
  NO_PERMISSIONS_CREATE_COMPANIES: 'ERROR_NO_PERMISSIONS_CREATE_COMPANIES',
  
  // Required field errors
  FIELD_REQUIRED: 'ERROR_FIELD_REQUIRED',
  COMPANY_ID_REQUIRED: 'ERROR_COMPANY_ID_REQUIRED',
  USER_ID_REQUIRED: 'ERROR_USER_ID_REQUIRED',
  CLIENT_ID_REQUIRED: 'ERROR_CLIENT_ID_REQUIRED',
  EQUIPMENT_NUMBER_REQUIRED: 'ERROR_EQUIPMENT_NUMBER_REQUIRED',
  EQUIPMENT_TYPE_REQUIRED: 'ERROR_EQUIPMENT_TYPE_REQUIRED',
  NAME_REQUIRED: 'ERROR_NAME_REQUIRED',
  STREET_ADDRESS_REQUIRED: 'ERROR_STREET_ADDRESS_REQUIRED',
  STATE_ID_REQUIRED: 'ERROR_STATE_ID_REQUIRED',
  ZIP_CODE_REQUIRED: 'ERROR_ZIP_CODE_REQUIRED',
  
  // Duplicate/uniqueness errors
  USER_ALREADY_HAS_ROLE: 'ERROR_USER_ALREADY_HAS_ROLE',
  EQUIPMENT_NUMBER_EXISTS: 'ERROR_EQUIPMENT_NUMBER_EXISTS',
  CLIENT_NAME_EXISTS: 'ERROR_CLIENT_NAME_EXISTS',
  DOT_NUMBER_EXISTS: 'ERROR_DOT_NUMBER_EXISTS',
  MC_NUMBER_EXISTS: 'ERROR_MC_NUMBER_EXISTS',
  COMPANY_NAME_EXISTS: 'ERROR_COMPANY_NAME_EXISTS',
  CONTACT_NAME_EXISTS: 'ERROR_CONTACT_NAME_EXISTS',
  
  // Not found errors
  EQUIPMENT_NOT_FOUND: 'ERROR_EQUIPMENT_NOT_FOUND',
  CLIENT_NOT_FOUND: 'ERROR_CLIENT_NOT_FOUND',
  CONTACT_NOT_FOUND: 'ERROR_CONTACT_NOT_FOUND',
  COMPANY_NOT_FOUND: 'ERROR_COMPANY_NOT_FOUND',
  CALCULATION_NOT_FOUND: 'ERROR_CALCULATION_NOT_FOUND',
  PERIOD_NOT_FOUND: 'ERROR_PERIOD_NOT_FOUND',
  INVITATION_NOT_FOUND: 'ERROR_INVITATION_NOT_FOUND',
  
  // Validation errors
  EMAIL_FORMAT_INVALID: 'ERROR_EMAIL_FORMAT_INVALID',
  ALREADY_PAID: 'ERROR_ALREADY_PAID',
  PERIOD_ALREADY_CLOSED: 'ERROR_PERIOD_ALREADY_CLOSED',
  CANNOT_CLOSE_PERIOD: 'ERROR_CANNOT_CLOSE_PERIOD',
  
  // General operation errors
  OPERATION_FAILED: 'ERROR_OPERATION_FAILED',
  DRIVER_NOT_FOUND: 'ERROR_DRIVER_NOT_FOUND',
  DISPATCHER_NOT_FOUND: 'ERROR_DISPATCHER_NOT_FOUND',
} as const;

export type ErrorCode = typeof ERROR_CODES[keyof typeof ERROR_CODES];

/**
 * Helper function to create error with code
 */
export const createErrorWithCode = (code: ErrorCode, details?: string): string => {
  return details ? `${code}:${details}` : code;
};

/**
 * Helper function to parse error code and details
 */
export const parseErrorCode = (error: string): { code: ErrorCode; details?: string } => {
  const parts = error.split(':');
  return {
    code: parts[0] as ErrorCode,
    details: parts.slice(1).join(':') || undefined
  };
};